#!/usr/bin/env python

import argparse
import sys
import os
import yaml
import zipfile

db_source = """
ZLIB:
 path: builtins/zlib/
Graf3d:
 deps: Graf Hist Gpad MathCore
 path: graf3d/g3d/
Graf:
 deps: Hist Matrix MathCore
 path: graf2d/graf/
Gpad:
 deps: Graf Hist
 path: graf2d/gpad/
Hist:
 deps: MathCore Matrix
 path: hist/hist/
Hbook:
 deps: Hist Matrix Tree Graf TreePlayer
 path: hist/hbook/
ROOTHistDraw:
 deps: ROOTGraphicsPrimitives
 path: hist/histdraw/
HistPainter:
 deps: Graf Hist Matrix MathCore ROOTHistDraw
 path: hist/histpainter/
Spectrum:
 deps: Hist Matrix
 path: hist/spectrum/
SpectrumPainter:
 deps: Graf Hist
 path: hist/spectrumpainter/
Unfold:
 deps: Hist XMLParser Matrix
 path: hist/unfold/
Tree:
 deps: Net MathCore
 path: tree/tree/
ROOTDataFrame:
 deps: Tree TreePlayer Hist ROOTVecOps
 path: tree/dataframe/
TreePlayer:
 deps: Tree Graf3d Graf Hist Gpad MathCore
 path: tree/treeplayer/
XMLIO:
 path: io/xml/
Net:
 path: net/net/
XMLParser:
 path: io/xmlparser/
SQLIO:
 deps: Net
 path: io/sql/
RFIO:
 deps: Net
 path: io/rfio/
HDFS:
 deps: Net
 path: io/hdfs/
GFAL:
 deps: Net
 path: io/gfal/
DCache:
 deps: Net
 path: io/dcache/
RCastor:
 deps: Net
 path: io/castor/
MathCore:
 path: math/mathcore/
Matrix:
 deps: MathCore
 path: math/matrix/
Quadp:
 deps: Matrix
 path: math/quadp/
FFTW:
 deps: MathCore
 path: math/fftw/
Fumili:
 deps: MathCore Hist Graf
 path: math/fumili/
Foam:
 deps: MathCore Hist
 path: math/foam/
Genetic:
 deps: MathCore TMVA
 path: math/genetic/
GenVector:
 deps: MathCore Physics
 path: math/genvector/
MathMore:
 deps: MathCore
 path: math/mathmore/
Minuit:
 deps: Graf Hist Matrix MathCore
 path: math/minuit/
Minuit2:
 deps: MathCore Hist
 path: math/minuit2/
MLP:
 deps: Hist Matrix Tree Graf Gpad TreePlayer MathCore
 path: math/mlp/
Physics:
 deps: Matrix MathCore
 path: math/physics/
Rtools:
 deps: MathCore RInterface
 path: math/rtools/
Smatrix:
 deps: Matrix MathCore
 path: math/smatrix/
Splot:
 deps: Matrix Hist Tree TreePlayer Graf3d Graf MathCore
 path: math/splot/
Unuran:
 deps: Hist MathCore
 path: math/unuran/
ROOTVecOps:
 deps: Matrix
 path: math/vecops/
"""
db_manifest = yaml.load(db_source)

root_sources = os.environ['ROOTSOURCES']
print("ROOT sources: ", root_sources)
pkg_path = os.environ['ROOT_PKG_PATH']
print("ROOT packages installation path: ", pkg_path)
pwd_path = os.getcwd()
print("root-get location: ", pwd_path)

for pkg in db_manifest:
  if "deps" in db_manifest[pkg].keys():
    if type(db_manifest[pkg]["deps"]) == str:
      db_manifest[pkg]["deps"] = db_manifest[pkg]["deps"].split()
  else:
    db_manifest[pkg]["deps"] = []
  db_manifest[pkg]["installed"] = os.path.isdir(os.path.join(pkg_path, pkg))

print(db_manifest)

####################################################
def zipdir(path, ziph):
    for root, dirs, files in os.walk(path):
        for file in files:
            ziph.write(os.path.join(root, file))

####################################################
def install_pkg(pkg):
  if pkg not in db_manifest.keys():
    print("Can't find package " + pkg)
    return False

  if db_manifest[pkg]["installed"] == True:
    return True

  for dep in db_manifest[pkg]["deps"]:
    if not install_pkg(dep):
      return False
  print("Installing " + pkg)
  src_dir = db_manifest[pkg]["path"]
  full_src_dir = root_sources + "/" + src_dir
# Buiding packages
  ecbuild = os.system(pwd_path + "/" + "build-pkg " + pkg + " " + full_src_dir)
  if ecbuild != 0:
    print("Failed to build package")
    return False
# Preparing packages
  ecpackaging = os.system(pwd_path + "/" + "prepare-pkg " + pkg)
  if ecpackaging != 0:
    print("Failed to create package")
    return False
# Installing packages
  ecinstall = os.system(pwd_path + "/" + "install-pkg " + pkg)
  if ecinstall != 0:
    print("Failed to install package in zip format")
    ecinstallninja = os.system(pwd_path + "/" + "install-pkg-ninja " + pkg)
    if ecinstallninja != 0:
        print("Failed to install package using build system")
        return False
  db_manifest[pkg]["installed"] = True
  return True
#########################################################
def do_install(args):
  if not install_pkg(args[0]):
    exit(1)
  pass

#########################################################
def do_list(args):
  for pkg in list(db_manifest.keys()):
    print(pkg)
  pass

#########################################################
def do_search(args):
  print(args)
  pass

#########################################################
actions = {
  "-i" : do_install,
  "--install" : do_install,
  "-l" : do_list,
  "--list" : do_list,
}

if sys.argv[1] in actions.keys():
  actions[sys.argv[1]](sys.argv[2:])
else:
  actions["-i"](sys.argv[1:])

exit(0)
manifest = None

with open(sys.argv[1], 'r') as stream:
  try:
    manifest = yaml.load(stream)
  except yaml.YAMLError as exc:
    print(exc)
