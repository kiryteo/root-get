#!/usr/bin/env python

import argparse
import sys
import os
import yaml
import zipfile

sys.path.insert(0, sys.path[0]+'analyzer')
sys.path.insert(0, sys.path[0]+'resolver')
sys.path.insert(0, sys.path[0]+'integrator')
# from root-get
from resolver import *
from analyzer.path4pkg import *
from integrator.zip4pkg import *

root_sources = os.environ['ROOTSOURCES']
print("ROOT sources: ", root_sources)
pkg_path = os.environ['ROOT_PKG_PATH']
print("ROOT packages installation path: ", pkg_path)
pwd_path = os.getcwd()
print("root-get location: ", pwd_path)

def install_pkg(pkg):
  src_dir_root = ''
# Checkout packages
  #check = os.system(pwd_path + "/analyzer/" + "check-root-package " + pkg + " " + root_sources)
  check = os.system('find %s -type d  -name "%s"' % (root_sources, pkg))
  if check != 0:
    print("Not a ROOT package (we are working only with ROOT packages for now.)")
    return False
  else:
    #src_dir_root = os.system(pwd_path + "/analyzer/" + "path4pkg.py " + pkg + " " + root_sources)
    src_dir_root = path4pkg(pkg, root_sources)
# Analyzing packages
  #full_src_dir_root = root_sources + "/" + src_dir_root
  ecanalyze = os.system(pwd_path + "/analyzer/" + "preparing-environment-for-pkg " + pkg + " " + src_dir_root)
  if ecanalyze != 0:
    print("Failed to configure package")
    return False
# Building DB
  db_manifest = db4pkg()
  if not db_manifest:
    print("Failed to generate DB")
    return False

  for pkg_index in db_manifest:
   if "deps" in db_manifest[pkg_index]:
     if type(db_manifest[pkg_index]["deps"]) == str:
       db_manifest[pkg_index]["deps"] = db_manifest[pkg_index]["deps"].split()
   else:
     db_manifest[pkg_index]["deps"] = []
   #print(db_manifest[pkg]["deps"])
   db_manifest[pkg_index]["installed"] = os.path.isdir(os.path.join(pkg_path, pkg_index))

# Checking DAG
  #manifest_src_dir = ''
  #dag = os.system(pwd_path + "/resolver/" + "dag4pkg.py " + manifest_src_dir)
  #if dag != 0:
    #print("Failed to configure package")
    #return False
# Work with DAG
#
#
#
# Buiding packages
  if pkg not in db_manifest.keys():
    print("Can't find package " + pkg)
    return False

  if db_manifest[pkg]["installed"] == True:
    return True
  print str(pkg) + "---------- " + str(db_manifest[pkg]["deps"])
  for dep in db_manifest[pkg]["deps"]:
    print("Installing dependences " + dep)
    if not install_pkg(dep):
        return False
  print("Installing " + pkg)
  src_dir = db_manifest[pkg]["path"]
  full_src_dir = root_sources + "/" + src_dir
  ecbuild = os.system(pwd_path + "/builder/" + "build-pkg " + pkg + " " + full_src_dir)
  if ecbuild != 0:
    print("Failed to build package")
    return False
# Preparing packages
  ecpackaging = os.system(pwd_path + "/integrator/" + "prepare-pkg " + pkg)
  if ecpackaging != 0:
    print("Failed to create package")
    return False
# Installing packages
  ecinstall = os.system(pwd_path + "/integrator/" + "install-pkg " + pkg)
  if ecinstall != 0:
    print("Failed to install package in zip format")
    ecinstallninja = os.system(pwd_path + "/integrator/" + "install-pkg-ninja " + pkg)
    if ecinstallninja != 0:
        print("Failed to install package using build system")
        return False
  db_manifest[pkg]["installed"] = True
  return True
#########################################################
def do_install(args):
  if not install_pkg(args[0]):
    exit(1)
  pass

#########################################################
def do_list(args):
  for pkg in list(db_manifest.keys()):
    print(pkg)
  pass

#########################################################
def do_search(args):
  print(args)
  pass

#########################################################
actions = {
  "-i" : do_install,
  "--install" : do_install,
  "-l" : do_list,
  "--list" : do_list,
}

if sys.argv[1] in actions.keys():
  actions[sys.argv[1]](sys.argv[2:])
else:
  print 'error'
  #actions["-i"](sys.argv[1:])



exit(0)
manifest = None

with open(sys.argv[1], 'r') as stream:
  try:
    manifest = yaml.load(stream)
  except yaml.YAMLError as exc:
    print(exc)
